name: test, package

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # max-parallel: 6
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8]
        requires: ['minimal', 'latest']

    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set min. dependencies
      if: matrix.requires == 'minimal'
      run: |
        python -c "req = open('pyproject.toml').read().replace(' >= ', ' == ') ; open('pyproject.toml', 'w').write(req)"

    # - name: Cache pip
    #   uses: actions/cache@v2
    #   id: cache
    #   with:
    #     path: ${{ env.pythonLocation }}
    #     # Look to see if there is a cache hit for the corresponding requirements files
    #     key: ${{ env.pythonLocation }}-${{ hashFiles('requirements/*') }}
    #     restore-keys: |
    #       ${{ env.pythonLocation }}-

    - name: Install dependencies
      # if: steps.cache.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade --user pip
        pip install setuptools tox
        python --version
        pip --version
        pip list

    - name: Run tests
      run: |
        # python -m tox
        # tox --sitepackages
        pip install .[dependencies]
        python setup.py build_ext --inplace
        python -c 'import challenge_scoring'

    - name: Build and install package
      run: |
        pip install -e .
        # check-manifest
        python setup.py develop
        # twine check dist/
        # tox --sitepackages
        # python -m tox
